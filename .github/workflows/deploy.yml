name: 🚀 Production Deployment

# WEBS-47: Manual deployment workflow with approval gate
# This workflow allows manual deployment to production (main branch) with approval
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      confirm_deployment:
        description: '⚠️  Confirm production deployment (type "DEPLOY" to confirm)'
        required: true
        type: string
      release_notes:
        description: 'Release notes or changes being deployed'
        required: false
        type: string
        default: 'Production deployment from dev branch'

# Ensure only one deployment runs at a time
concurrency:
  group: production-deployment
  cancel-in-progress: false

jobs:
  # Job 1: Pre-deployment validation
  pre-deployment:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    
    outputs:
      should_deploy: ${{ steps.validate.outputs.should_deploy }}
      
    steps:
    - name: Validate deployment confirmation
      id: validate
      run: |
        if [ "${{ github.event.inputs.confirm_deployment }}" != "DEPLOY" ]; then
          echo "❌ Deployment confirmation failed. Please type 'DEPLOY' to confirm."
          echo "Received: '${{ github.event.inputs.confirm_deployment }}'"
          exit 1
        fi
        
        echo "✅ Deployment confirmed by ${{ github.actor }}"
        echo "🎯 Target environment: ${{ github.event.inputs.environment }}"
        echo "📝 Release notes: ${{ github.event.inputs.release_notes }}"
        echo "should_deploy=true" >> $GITHUB_OUTPUT
        
    - name: Check actor permissions
      run: |
        echo "🔐 Deployment initiated by: ${{ github.actor }}"
        echo "📅 Deployment time: $(date -u)"
        echo "🌐 Repository: ${{ github.repository }}"

  # Job 2: Deploy to production
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should_deploy == 'true'
    
    environment: 
      name: production
      url: https://aethron.tech
      
    defaults:
      run:
        working-directory: ./aethron.tech
        
    steps:
    - name: Checkout dev branch
      uses: actions/checkout@v4
      with:
        ref: dev
        fetch-depth: 0  # Fetch full history for proper merging
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: aethron.tech/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run full quality checks
      run: |
        echo "🔍 Running pre-deployment quality checks..."
        
        # Run all linting
        npm run lint:check
        
        # Build the site
        npm run build
        
        # Start local server for OG validation
        npm run serve &
        SERVER_PID=$!
        sleep 10  # Wait for server to start
        
        # Run OG validation
        echo "🔗 Validating Open Graph tags..."
        npm run validate:og || echo "⚠️ OG validation warnings (deployment continues)"
        
        # Stop local server
        kill $SERVER_PID
        
        echo "✅ All quality checks passed!"
        
    - name: Create production merge
      run: |
        echo "🔄 Preparing production deployment..."
        
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Switch to main branch
        git checkout main
        git pull origin main
        
        # Merge dev into main
        git merge dev --no-ff -m "🚀 Production deployment: ${{ github.event.inputs.release_notes }}

        Deployed by: ${{ github.actor }}
        Deployment time: $(date -u)
        Source branch: dev
        Target environment: ${{ github.event.inputs.environment }}"
        
    - name: Build production site
      run: |
        echo "🏗️  Building production site..."
        npm run build
      env:
        NODE_ENV: production
        
    - name: Verify production build
      run: |
        echo "🔍 Verifying production build..."
        
        if [ ! -d "_site" ]; then
          echo "❌ Production build failed: _site directory not found"
          exit 1
        fi
        
        if [ ! -f "_site/index.html" ]; then
          echo "❌ Production build failed: index.html not found"
          exit 1
        fi
        
        echo "✅ Production build verified successfully"
        echo "📊 Production build statistics:"
        echo "   - Total files: $(find _site/ -type f | wc -l)"
        echo "   - HTML files: $(find _site/ -name '*.html' | wc -l)"
        echo "   - Build size: $(du -sh _site/ | cut -f1)"
        
    - name: Push to production
      run: |
        echo "🚀 Pushing to production..."
        git push origin main
        
    - name: Upload production build
      uses: actions/upload-artifact@v4
      with:
        name: production-build-${{ github.run_number }}
        path: aethron.tech/_site/
        retention-days: 30
        
  # Job 3: Post-deployment verification
  post-deployment:
    name: ✅ Post-deployment Verification
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && needs.deploy.result == 'success'
    
    steps:
    - name: Verify deployment
      run: |
        echo "🔍 Verifying production deployment..."
        
        # Wait a moment for deployment to propagate
        sleep 10
        
        # Check if main branch was updated
        echo "📅 Main branch last updated: $(git log -1 --format='%cd' --date=iso)"
        
        echo "✅ Production deployment completed successfully!"
        
    - name: Deployment summary
      run: |
        echo "# 🎉 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release notes:** ${{ github.event.inputs.release_notes }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Source branch:** dev" >> $GITHUB_STEP_SUMMARY
        echo "- **Target branch:** main" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Status" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **Live site:** https://aethron.tech" >> $GITHUB_STEP_SUMMARY

  # Job 4: Notify on failure
  notify-failure:
    name: ❌ Deployment Failed
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy]
    if: failure()
    
    steps:
    - name: Deployment failure summary
      run: |
        echo "# ❌ Production Deployment Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Failure Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Initiated by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Failure time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Check the failed job logs above" >> $GITHUB_STEP_SUMMARY
        echo "2. Fix any issues in the dev branch" >> $GITHUB_STEP_SUMMARY
        echo "3. Re-run the deployment workflow" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ **Production deployment was not completed.**" >> $GITHUB_STEP_SUMMARY
